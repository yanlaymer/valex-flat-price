import streamlit as st
from src.predictor import Predictor
import hashlib
from pickle import load
import pandas as pd
from time import sleep

ARTEFACTS_PATH = 'model/artefacts/'
ENCODERS = {
    "district": "district_encoder.sav",
    "owner": "owner_encoder.sav",
    "building": "building_encoder.sav",
    "flat_renovation": "flat_renovation_encoder.sav",
    "flat_priv": "flat_priv_encoder.sav",
    "furniture": "furniture_encoder.sav",
    "toilet": "toilet_encoder.sav"
}

encoders = {}

for key, filename in ENCODERS.items():
    with open(ARTEFACTS_PATH + filename, 'rb') as f:
        encoders[key] = load(f)

def check_password(stored_password, user_password):
    return stored_password == hashlib.sha256(user_password.encode()).hexdigest()

st.title("VALEX –û–¶–ï–ù–ö–ê –ö–í–ê–†–¢–ò–†–´")
st.write("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã.")

def main():
    # Location Information
    st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ üìç")
    st.markdown(
    """
    <div style="color: orange; font-size: small; margin-bottom: 20px">
    ‚ö†Ô∏è –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É.
    </div>
    """,
    unsafe_allow_html=True,
)
    input_type = st.radio("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ?", ["–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å", "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É"])
    
    if input_type == "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å":
        city = st.text_input("–ì–æ—Ä–æ–¥")
        district = st.text_input("–†–∞–π–æ–Ω")
        street = st.text_input("–£–ª–∏—Ü–∞")
        home_number = st.text_input("–ù–æ–º–µ—Ä –¥–æ–º–∞")
        latitude = None
        longitude = None
    else:
        city = None
        district = None
        street = None
        home_number = None
        latitude = st.text_input("–®–∏—Ä–æ—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: xx.xxxxxx)")
        longitude = st.text_input("–î–æ–ª–≥–æ—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: xx.xxxxxx)")
        
        try:
            latitude = float(latitude)
            longitude = float(longitude)
        except ValueError:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã.")

    # Apartment Details
    st.subheader("–î–µ—Ç–∞–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã üè†")
    residential_complex = st.text_input("–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)", value="")
    total_square = st.number_input("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–≤ –∫–≤.–º)", min_value=0.0)
    kitchen_square = st.number_input("–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ (–≤ –∫–≤.–º)", min_value=0.0)
    flat_floor = st.number_input("–≠—Ç–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã", min_value=1)
    building_floor = st.number_input("–≠—Ç–∞–∂ –∑–¥–∞–Ω–∏—è", min_value=1)
    live_rooms = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–ª—ã—Ö –∫–æ–º–Ω–∞—Ç", min_value=1)
    building_year = st.number_input("–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", min_value=1900, max_value=2023)

    building_type_choices = encoders["building"].classes_.tolist()
    building_type = st.selectbox("–¢–∏–ø –∑–¥–∞–Ω–∏—è", building_type_choices)

    flat_priv_dorm_choices = encoders["flat_priv"].classes_.tolist()
    flat_priv_dorm = st.selectbox("–ß–∞—Å—Ç–Ω–æ–µ –æ–±—â–µ–∂–∏—Ç–∏–µ", flat_priv_dorm_choices)
    flat_renovation_choices = encoders["flat_renovation"].classes_.tolist()
    flat_renovation = st.selectbox("–†–µ–º–æ–Ω—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ", flat_renovation_choices)
    flat_toilet_choices = encoders["toilet"].classes_.tolist()
    flat_toilet = st.selectbox("–¢—É–∞–ª–µ—Ç", flat_toilet_choices)
    live_furniture_choices = encoders["furniture"].classes_.tolist()
    live_furniture = st.selectbox("–ú–µ–±–µ–ª—å", live_furniture_choices)

    # Button to start prediction
    if st.button("–û—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã"):
        
        data = {
            "city": city,
            "district": district,
            "street": street,
            "residential_complex": residential_complex,
            "latitude": latitude,
            "longitude": longitude,
            "home_number": home_number,
            "building_type": building_type,
            "total_square": total_square,
            "kitchen_square": kitchen_square,
            "flat_floor": flat_floor,
            "building_floor": building_floor,
            "live_rooms": live_rooms,
            "building_year": building_year,
            "flat_priv_dorm": flat_priv_dorm,
            "flat_renovation": flat_renovation,
            "flat_toilet": flat_toilet,
            "live_furniture": live_furniture
        }
        status_placeholder = st.empty()
        status_placeholder.text("–ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∏... ‚è≥")
        sleep(1)  # Simulating some processing time
        predictor = Predictor(data)
        price, links = predictor.predict_price()
        
        status_placeholder.text("–°–≤–µ—Ä—è–µ–º—Å—è —Å –∞–Ω–∞–ª–æ–≥–∞–º–∏... ‚è≥")
        sleep(0.5)  # Simulating some processing time

        # Update the status and show a loader icon

        status_placeholder.text("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏... ‚è≥")
        sleep(1)  # Simulating some processing time
        st.success(f"–û—Ü–µ–Ω–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {price} –¢")
        status_placeholder.text("–ì–æ—Ç–æ–≤–æ ‚úÖ")

        # plot map
        lat, lon = predictor.model_entry['latitude'], predictor.model_entry['longitude']
        map_df = pd.DataFrame({'lat': [lat], 'lon': [lon]})
        st.map(map_df, zoom=15)

        # make preview links as buttons
        st.write("–°—Å—ã–ª–∫–∏ –Ω–∞ –∞–Ω–∞–ª–æ–≥–∏:")
        for link in links:
            st.markdown(f'<a href="{link}" target="_blank">–°—Å—ã–ª–∫–∞</a>', unsafe_allow_html=True)
            
        st.write("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω")
        analog_prices_min = predictor.model_entry['analog_prices_min'] * predictor.entry['total_square']
        analog_prices_median = predictor.model_entry['analog_prices_median'] * predictor.entry['total_square']
        analog_prices_max = predictor.model_entry['analog_prices_max'] * predictor.entry['total_square']
        st.write(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {analog_prices_min}")
        st.write(f"–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {analog_prices_median}")
        st.write(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {analog_prices_max}")
            

def auth():
    username = st.sidebar.text_input("–õ–æ–≥–∏–Ω")
    password = st.sidebar.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    if st.sidebar.button("–í–æ–π—Ç–∏"):
        stored_password = hashlib.sha256("KNAGT2001_d".encode()).hexdigest()
        if username == "test" and check_password(stored_password, password):
            st.session_state.logged_in = True
        else:
            st.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑.")
    return st.session_state.logged_in

if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False

if auth():
    main()
else:
    st.sidebar.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π.")
